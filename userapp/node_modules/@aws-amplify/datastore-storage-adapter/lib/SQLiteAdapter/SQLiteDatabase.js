"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var react_native_sqlite_storage_1 = tslib_1.__importDefault(require("react-native-sqlite-storage"));
var core_1 = require("@aws-amplify/core");
var constants_1 = require("../common/constants");
var logger = new core_1.ConsoleLogger('SQLiteDatabase');
react_native_sqlite_storage_1.default.enablePromise(true);
if (core_1.ConsoleLogger.LOG_LEVEL === 'DEBUG') {
    react_native_sqlite_storage_1.default.DEBUG(true);
}
/*

Note:
I purposely avoided using arrow functions () => {} in this class,
Because I ran into issues with them in some of the SQLite method callbacks

Also, even though the SQLite library is promisified, certain operations
only work correctly with callbacks. Specifically, any time you need to
get the result of an `executeSql` command inside of a transaction
(see the batchQuery method below)

*/
var SQLiteDatabase = /** @class */ (function () {
    function SQLiteDatabase() {
    }
    SQLiteDatabase.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.db) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, react_native_sqlite_storage_1.default.openDatabase({
                                name: constants_1.DB_NAME,
                                location: 'default',
                            })];
                    case 1:
                        _a.db = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    SQLiteDatabase.prototype.createSchema = function (statements) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeStatements(statements)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SQLiteDatabase.prototype.clear = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.closeDB()];
                    case 1:
                        _a.sent();
                        logger.debug('Deleting database');
                        return [4 /*yield*/, react_native_sqlite_storage_1.default.deleteDatabase({ name: constants_1.DB_NAME, location: 'default' })];
                    case 2:
                        _a.sent();
                        logger.debug('Database deleted');
                        return [2 /*return*/];
                }
            });
        });
    };
    SQLiteDatabase.prototype.get = function (statement, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var results;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAll(statement, params)];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, results[0]];
                }
            });
        });
    };
    SQLiteDatabase.prototype.getAll = function (statement, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, resultSet, result;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.db.executeSql(statement, params)];
                    case 1:
                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 1]), resultSet = _a[0];
                        result = resultSet &&
                            resultSet.rows &&
                            resultSet.rows.length &&
                            resultSet.rows.raw &&
                            resultSet.rows.raw();
                        return [2 /*return*/, result || []];
                }
            });
        });
    };
    SQLiteDatabase.prototype.save = function (statement, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.executeSql(statement, params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SQLiteDatabase.prototype.batchQuery = function (queryParameterizedStatements) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var results;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        results = [];
                        return [4 /*yield*/, this.db.readTransaction(function (tx) {
                                var e_1, _a;
                                try {
                                    for (var queryParameterizedStatements_1 = tslib_1.__values(queryParameterizedStatements), queryParameterizedStatements_1_1 = queryParameterizedStatements_1.next(); !queryParameterizedStatements_1_1.done; queryParameterizedStatements_1_1 = queryParameterizedStatements_1.next()) {
                                        var _b = tslib_1.__read(queryParameterizedStatements_1_1.value, 2), statement = _b[0], params = _b[1];
                                        tx.executeSql(statement, params, function (_, res) {
                                            results.push(res.rows.raw()[0]);
                                        }, logger.warn);
                                    }
                                }
                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                finally {
                                    try {
                                        if (queryParameterizedStatements_1_1 && !queryParameterizedStatements_1_1.done && (_a = queryParameterizedStatements_1.return)) _a.call(queryParameterizedStatements_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, results];
                }
            });
        });
    };
    SQLiteDatabase.prototype.batchSave = function (saveParameterizedStatements, deleteParameterizedStatements) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.transaction(function (tx) {
                            var e_2, _a;
                            try {
                                for (var saveParameterizedStatements_1 = tslib_1.__values(saveParameterizedStatements), saveParameterizedStatements_1_1 = saveParameterizedStatements_1.next(); !saveParameterizedStatements_1_1.done; saveParameterizedStatements_1_1 = saveParameterizedStatements_1.next()) {
                                    var _b = tslib_1.__read(saveParameterizedStatements_1_1.value, 2), statement = _b[0], params = _b[1];
                                    tx.executeSql(statement, params);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (saveParameterizedStatements_1_1 && !saveParameterizedStatements_1_1.done && (_a = saveParameterizedStatements_1.return)) _a.call(saveParameterizedStatements_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        })];
                    case 1:
                        _a.sent();
                        if (!deleteParameterizedStatements) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.db.transaction(function (tx) {
                                var e_3, _a;
                                try {
                                    for (var deleteParameterizedStatements_1 = tslib_1.__values(deleteParameterizedStatements), deleteParameterizedStatements_1_1 = deleteParameterizedStatements_1.next(); !deleteParameterizedStatements_1_1.done; deleteParameterizedStatements_1_1 = deleteParameterizedStatements_1.next()) {
                                        var _b = tslib_1.__read(deleteParameterizedStatements_1_1.value, 2), statement = _b[0], params = _b[1];
                                        tx.executeSql(statement, params);
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (deleteParameterizedStatements_1_1 && !deleteParameterizedStatements_1_1.done && (_a = deleteParameterizedStatements_1.return)) _a.call(deleteParameterizedStatements_1);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SQLiteDatabase.prototype.selectAndDelete = function (queryParameterizedStatement, deleteParameterizedStatement) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var results, _a, queryStatement, queryParams, _b, deleteStatement, deleteParams;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        results = [];
                        _a = tslib_1.__read(queryParameterizedStatement, 2), queryStatement = _a[0], queryParams = _a[1];
                        _b = tslib_1.__read(deleteParameterizedStatement, 2), deleteStatement = _b[0], deleteParams = _b[1];
                        return [4 /*yield*/, this.db.transaction(function (tx) {
                                tx.executeSql(queryStatement, queryParams, function (_, res) {
                                    results = res.rows.raw();
                                }, logger.warn);
                                tx.executeSql(deleteStatement, deleteParams, function () { }, logger.warn);
                            })];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, results];
                }
            });
        });
    };
    SQLiteDatabase.prototype.executeStatements = function (statements) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.transaction(function (tx) {
                            var e_4, _a;
                            try {
                                for (var statements_1 = tslib_1.__values(statements), statements_1_1 = statements_1.next(); !statements_1_1.done; statements_1_1 = statements_1.next()) {
                                    var statement = statements_1_1.value;
                                    tx.executeSql(statement);
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (statements_1_1 && !statements_1_1.done && (_a = statements_1.return)) _a.call(statements_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SQLiteDatabase.prototype.closeDB = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.db) return [3 /*break*/, 2];
                        logger.debug('Closing Database');
                        return [4 /*yield*/, this.db.close()];
                    case 1:
                        _a.sent();
                        logger.debug('Database closed');
                        this.db = undefined;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return SQLiteDatabase;
}());
exports.default = SQLiteDatabase;
//# sourceMappingURL=SQLiteDatabase.js.map