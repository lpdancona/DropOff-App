/// <reference types="react" />
import { DefaultContainer } from './common';
import { AuthenticatorProps } from './types';
declare function Authenticator({ children, components: overrides, Container, Footer, Header, ...options }: AuthenticatorProps): JSX.Element | null;
declare namespace Authenticator {
    var Container: typeof DefaultContainer;
    var Provider: typeof import("@aws-amplify/ui-react-core").AuthenticatorProvider;
    var ConfirmResetPassword: {
        ({ fields, handleBlur, handleChange, handleSubmit, hasValidationErrors, isPending, resendCode, validationErrors, ...rest }: import("./Defaults/types").DefaultConfirmResetPasswordProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var ConfirmSignIn: {
        ({ challengeName, fields, handleBlur, handleChange, handleSubmit, isPending, toSignIn, validationErrors, ...rest }: import("./Defaults/types").DefaultConfirmSignInProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var ConfirmSignUp: {
        ({ codeDeliveryDetails, fields, handleBlur, handleChange, handleSubmit, isPending, resendCode, validationErrors, ...rest }: import("./Defaults/types").DefaultConfirmSignUpProps): JSX.Element;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Footer: typeof import("./common").DefaultFooter;
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var ConfirmVerifyUser: {
        ({ fields, handleBlur, handleChange, handleSubmit, isPending, skipVerification, validationErrors, ...rest }: import("./Defaults/types").DefaultConfirmVerifyUserProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var ForceNewPassword: {
        ({ fields, handleBlur, handleChange, handleSubmit, hasValidationErrors, isPending, toSignIn, validationErrors, ...rest }: import("./Defaults/types").DefaultForceNewPasswordProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var ResetPassword: {
        ({ fields, handleBlur, handleChange, handleSubmit, isPending, toSignIn, validationErrors, ...rest }: import("./Defaults/types").DefaultResetPasswordProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var SetupTOTP: {
        ({ fields, handleBlur, handleChange, handleSubmit, isPending, toSignIn, totpSecretCode, validationErrors, ...rest }: import("./Defaults/types").DefaultSetupTOTPProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var SignIn: {
        ({ fields, handleBlur, handleChange, handleSubmit, hideSignUp, toResetPassword, toSignUp, validationErrors, ...rest }: import("./Defaults/types").DefaultSignInProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var SignUp: {
        ({ fields, handleBlur, handleChange, handleSubmit, hasValidationErrors, hideSignIn, isPending, toSignIn, validationErrors, ...rest }: import("./Defaults/types").DefaultSignUpProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fieldContainerStyle, fieldErrorsContainer, fieldErrorStyle, fieldStyle, fields, isPending, style, validationErrors, }: import("./common/DefaultFormFields/types").DefaultTextFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
    var VerifyUser: {
        ({ fields, handleBlur, handleChange, handleSubmit, skipVerification, validationErrors, ...rest }: import("./Defaults/types").DefaultVerifyUserProps): JSX.Element;
        Footer: typeof import("./common").DefaultFooter;
        FormFields: {
            ({ fields, fieldContainerStyle, fieldLabelStyle, isPending, style, }: import("./common/DefaultFormFields/types").DefaultRadioFormFieldsProps): JSX.Element;
            displayName: string;
        };
        Header: typeof import("./common").DefaultHeader;
        displayName: string;
    };
}
export default Authenticator;
